def T = λt λf t
def F = λt λf f
def and = λpλq dup #a p1 p2 = p; (p1 q p2)
def Z = λs λz (z)
def S = λn λs λz (s n)
def Node = λa λb λn λl (n a b)
def Leaf = λn λl l

def pred = λn (n (λp p) Z)

// def Y = λf dup #f f1 f2 = f; ((λx dup #xx x1 x2 = x; (f1 (x1 x2))) (λx dup #xx x1 x2 = x; (f2 (x1 x2))))
// def Y = λf dup #f f1 f2 = f; ((λx dup #xx x1 x2 = x; (f1 (x1 x2))) (λy dup #yy y1 y2 = y; (f2 (y1 y2))))
// def double = λf λn (n (λp (S (S (f p)))) Z)
def double = λn (n (λp (S (S (double p)))) Z)

def mul = λn λm λs (n (m s))
def n6 = (mul (S (S Z)) (S (S (S Z))))

// def foo = λn (n (λn2 (n2 (λp p)) (S Z)) (λn3 (n3 (λp2 p2)) (S Z)))
def bar = λv (v (λn1 (n1 (λp1 (S (S (double p1)))) Z)) (λn2 (n2 (λp2 (S (S (double p2)))) Z)))

// (Y double (S (S Z)))

// (pred (S (S Z)))
(pred (double (double (S Z))))
// (pred λs λz (s λs λz (s λs λz (z)))) // 'Variable used more than once: s'

// (Node (S (S (S Z))) Leaf)
// (Node Z Z)
// (S (S (S Z)))
// (S Z)
// (and T T)
